* Pseudocode
** myshell.c
#+BEGIN_SRC [c-mode]
main(char **argv){
    if(argv is not empty)
        execute(argv);
    else
        while(input != "quit"){
            parse(input);
            if(input contains i/o redirection)
                execute_redirected(input);
            else
                execute(input);
        }
}

execute(input, int background){
    int pid = fork();
    int status
    if(pid < 0)
        failed to fork;
        exit;
    else if(pid == 0)
        if(input matches builtin function)
            call builtin function;
        else
            execvp(input);
    else if(pid > 0 && '&' is not at the end of the input)
        wait();
}

execute_redirected(input){
    create pipe;
    int pid1 = fork();
    from = command/file to send output by pipe depending on redirection
    to = command/file to recieve input by pipe depending on redirection
    if(pid < 0)
        failed to setup pipe;
        exit;
    if(pid > 0)
        redirect stdout to pipe write;
        if(from matches builtin function)
            call builtin function;
        else
            execvp(from);
    if(pid == 0)
        redirect stdin to pipe read;
        if(to matches builtin function)
            call builtin function;
        else
            execvp(to);
}

char[][]  parse(input){
    return 2d array of input, split at whitespace;
}
#+END_SRC
** utilities.c
#+BEGIN_SRC [c-mode]
cd(input){
    if(no parameters)
        pwd();
    else if(chdir(first parameter) == -1)
        printf(stderr, "Failed to change directory");
}

pwd(){
    printf("%s", getcwd());
}

cls(){
    printf("\033[2j");
}

dir(){
    system(ls);
}

environ(){
    print all environment variable;
}

echo(input){
    for(each parameter in input array)
        printf("%s ", parameter);
}

help(){
    print help dialogue;
}

pause(){
    while(get char != "\n");
}
#+END_SRC
